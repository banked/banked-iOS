// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Banked
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Banked
import Foundation
import ImageIO
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum BankedCheckoutError : Swift.Equatable {
  case apiKeyIncorrect
  case apiKeyMissing
  case canNotDecodeData
  case internalServerError
  case missingData
  case noInternetConnection
  case paymentHasBeenSent
  case paymentHasFailed
  case paymentHasBeenAborted
  case paymentIdMissing
  case paymentIsPending
  case paymentMissingPayer
  case paymentNotFound
  case providerError(text: Swift.String)
  case requestCanceled
  case userCanceled
  case unprocesableEntity
  case genericError
  public static func == (a: Banked.BankedCheckoutError, b: Banked.BankedCheckoutError) -> Swift.Bool
}
public enum BankedCheckoutResponse : Swift.Equatable {
  case success
  case failure(Banked.BankedCheckoutError)
  public static func == (a: Banked.BankedCheckoutResponse, b: Banked.BankedCheckoutResponse) -> Swift.Bool
}
@available(*, deprecated, message: "This type is deprecated, 'pay' is used all the time now.")
public enum PaymentAction {
  case pay
  case donate
  case send
  case transfer
  public static func == (a: Banked.PaymentAction, b: Banked.PaymentAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class BankedCheckout : ObjectiveC.NSObject {
  public static let defaultProductionBaseURL: Foundation.URL
  public static let shared: Banked.BankedCheckout
  weak public var delegate: (any Banked.BankedCheckoutDelegate)? {
    get
    set
  }
  public var baseURL: Foundation.URL? {
    get
  }
  public func setUp(_ clientKey: Swift.String)
  public func setUp(clientKey: Swift.String, baseURL: Foundation.URL)
  public func presentCheckout(_ viewController: UIKit.UIViewController, paymentId: Swift.String, continueURL: Swift.String, completion: @escaping (Banked.BankedCheckoutResponse) -> Swift.Void)
  @available(*, deprecated, renamed: "presentCheckout(viewController:paymentId:continueURL:completion:)")
  public func presentCheckout(_ viewController: UIKit.UIViewController, paymentId: Swift.String, action: Banked.PaymentAction, continueURL: Swift.String, completion: @escaping (Banked.BankedCheckoutResponse) -> Swift.Void)
  public func handlePaymentWithURL(_ url: Foundation.URL, completion: @escaping (Banked.BankedCheckoutResponse) -> Swift.Void)
  @available(*, deprecated, renamed: "handlePaymentWithURL(url:completion:)")
  public func handlePaymentWithURL(_ url: Foundation.URL, action: Banked.PaymentAction, completion: @escaping (Banked.BankedCheckoutResponse) -> Swift.Void)
  @objc deinit
}
public protocol BankedCheckoutDelegate : AnyObject {
  func bankedCheckoutIsLoading(_ isLoading: Swift.Bool)
}
extension UIKit.UIImage {
  public class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  public class func gifImageWithURL(_ gifUrl: Swift.String) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var keyboardLayoutGuide: UIKit.UILayoutGuide {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyboardLayoutGuideNoSafeArea: UIKit.UILayoutGuide {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class KeyboardLayoutGuide : UIKit.UILayoutGuide {
  @_Concurrency.MainActor(unsafe) public var usesSafeArea: Swift.Bool {
    get
    set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(notificationCenter: Foundation.NotificationCenter = NotificationCenter.default)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SwiftMaskTextfield : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) final public let lettersAndDigitsReplacementChar: Swift.String
  @_Concurrency.MainActor(unsafe) final public let anyLetterReplecementChar: Swift.String
  @_Concurrency.MainActor(unsafe) final public let lowerCaseLetterReplecementChar: Swift.String
  @_Concurrency.MainActor(unsafe) final public let upperCaseLetterReplecementChar: Swift.String
  @_Concurrency.MainActor(unsafe) final public let digitsReplecementChar: Swift.String
  @_Concurrency.MainActor(unsafe) final public let upperCaseLetterOrDigitReplecementChar: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var formatPattern: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var prefix: Swift.String
  @_Concurrency.MainActor(unsafe) open var maxLength: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func formatText()
}
@available(*, deprecated, message: "This type is deprecated, 'pay' is used all the time now.")
extension Banked.PaymentAction : Swift.Equatable {}
@available(*, deprecated, message: "This type is deprecated, 'pay' is used all the time now.")
extension Banked.PaymentAction : Swift.Hashable {}
